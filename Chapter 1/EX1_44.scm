#lang sicp
(define dx 0.01)
(define (compose f g)
  (lambda (x) (f (g x))))
(define (repeated f n)
  (if (= n 1)
      (lambda (x) (f x))
      (compose f (repeated f (- n 1)))))
(define (smooth f)
  (lambda (x) (/ (+ (f x) (f (+ x dx)) (f (- x dx))) 3)))
(define (n-smooth f n)
  (lambda (x) (((repeated smooth n) f) x)))

(define (function-values f a b step)
  (cond ((not (> a b)) (display (f a))
                       (newline)
                       (function-values f (+ a step) b step))))
; (function-values (n-smooth abs 10) -1 1 0.01)
; (function-values abs -1 1 0.01)
